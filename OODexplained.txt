Use case 1: adding objects to the list
    Constructing and adding an object with the MainMenu is streamlined with this object-oriented design.
    FoodItem and DrinkItem are both subclasses of Consumable, with only two notable differences:
        ->FoodItem has a weight, while DrinkItem has a volume.
        ->FoodItem and DrinkItem have different toStrings, each indicating their respective type.
    Since they are both variations of Consumable, I use properties of polymorphism to streamline construction.
    The ConsumableFactory is a simple class that creates and returns either a FoodItem or DrinkItem.
    The getInstance method takes in a boolean to indicate whether if it is a food, then creates the item based
    off of the information given. This design pattern ensures that there is minimal duplicate code, and maintenance
    will be easier.

    Additionally, this also means that the UI can also treat the two classes largely the same.
    Since most fields (name, notes, price, expiry date) are identical between the two, I only need to display
    different text to ask for the weight/volume. I then get an instance of FoodItem or DrinkItem with the
    ConsumableFactory.

    Due to the polymorphic properties of these objects, they can be stored in one ArrayList that stores consumables.
    This means that their fields, such as expiry date, can be compared with each other was well. As such, the mixed
    food/drink list can be sorted by expiry date, despite not being of the same type.

    In general, polymorphism and the ConsumableFactory infrastructure streamlines adding new Consumables significantly.
    The OOD is designed to reduce redundancy and treat Food and Drink the same wherever possible.

Use case 2: saving objects using Gson
    Deserializing polymorphic objects is difficult and not supported by the default Gson functionality.
    This is because the json string does not explicitly communicate whether a Consumable is a FoodItem or DrinkItem.
    One of the suggested solutions to this issue was to read in a Consumable and reconstruct the list,
    making each object either a FoodItem or DrinkItem based on a field storing the type.

    However, I used an extra Gson feature from Google's GitHub to accomplish this without the need to manually
    reconstruct the objects:
    https://github.com/google/gson/blob/master/extras/src/main/java/com/google/gson/typeadapters/RuntimeTypeAdapterFactory.java
    The RuntimeTypeAdapterFactory class allows the Gson to distinguish between subtypes. I create a
    RuntimeTypeAdapterFactory with the subtypes "food" and "drink". When creating a Consumable object from
    ConsumableFactory, I set "food" or "drink" in the type field as well. So, after setting the
    RuntimeTypeAdapterFactory to my Gson object, it can distinguish between a FoodItem and DrinkItem, and makes it into
    its respective type. Since this does not set the type field, I must do it manually when loading; this allows
    objects to be serialized and deserialized multiple times.

    This solution respects the OOD, since otherwise I would have to read all the fields of a Consumable object and
    recreate a FoodItem or DrinkItem based on that information. The RuntimeTypeAdapterFactory allows me to load a list
    of Consumables without manually parsing all their data.